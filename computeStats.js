var inputFileName = process.argv[2] || './data/dependenciesGraph.out.graph';
var count = process.argv[3] || 100;
var centrality = require('ngraph.centrality');
var fromjson = require('ngraph.fromjson');
var pagerank = require('ngraph.pagerank');
var hitsrank = require('ngraph.hits');
var fs = require('fs');

console.log('Data generated by https://github.com/anvaka/npmrank');
console.log('Date: ' + (new Date().toUTCString()) );
console.log('Input file: ' + inputFileName);
console.log('');
console.log('# Top ' + count + ' most dependent upon packages');
var graph = fromjson(fs.readFileSync(inputFileName, 'utf8'));
printTop(centrality.degree(graph, 'in'), count);

console.log('# Top ' + count + ' packages with most dependencies');
printTop(centrality.degree(graph, 'out'), count);

console.log('# Top ' + count + ' packages with highest Pagerank');
printTop(pagerank(graph, 0.85, 1e-10), count);

console.log('# Top ' + count + ' packages with highest authority in HITS rank');
printTop(hitsrank(graph), count, hitsSort, hitsPrint);

function printTop(stats, count, sort, print) {
  sort = sort || byValue;
  print = print || toLink;
  var allKeys = Object.keys(stats);
  var idx = 0;
  var packages = allKeys.sort(sortProxy)
    .slice(0, Math.min(count, allKeys.length))
    .map(mapProxy)
    .join('\n');

  console.log('');
  console.log(packages);
  console.log('');

  function sortProxy(x, y) {
    return sort(stats, x, y);
  }

  function mapProxy(x) {
    return print(stats, x, idx++);
  }

  function byValue(stats, x, y) {
    return stats[y] - stats[x];
  }

  function toLink(stats, x, idx) {
    return idx + '. [' + x + '](https://www.npmjs.org/package/' + x + ') - ' + stats[x];
  }
}

function hitsSort(stats, x, y) {
  return stats[y].authority - stats[x].authority;
}

function hitsPrint(stats, x, idx) {
  return idx + '. [' + x + '](https://www.npmjs.org/package/' + x + ') - ' + stats[x].authority;
}
